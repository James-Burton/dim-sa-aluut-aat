# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FNBLineDialog
                                 A QGIS plugin
 This plugin takes an area of interest and produces a PDF outlining overlapping layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-08-09
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Evan Lavine 
        email                : evan.lavine@bc.gov.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog
from qgis.core import QgsMapLayerProxyModel

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'thab_dialog_base.ui'))


class ThabReportDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, stored_input_path='', stored_output_path=''):
        """Constructor."""
        super(ThabReportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.vector_input.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.vector_input.currentIndexChanged.connect(self.layer_selection_trigger)
        
        #self.btn_select_input.clicked.connect(self.select_file)
        #self.btn_select_output.clicked.connect(self.select_output)
       #self.report_output.setText(stored_input_path)
        # self.last_path = stored_input_path
        # self.path_input.setText(stored_output_path)
        # self.last_path2 = stored_output_path
    def layer_selection_trigger(self):
        
        if self.vector_input.currentLayer() is not None:
            if self.vector_input.currentLayer().selectedFeatureCount()>0:
                selection_state = True
            else:
                selection_state = False
            self.useSelected.setEnabled(selection_state)
            self.useSelected.setChecked(selection_state)
